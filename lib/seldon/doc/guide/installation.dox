/*! \file installation.dox
    \brief Installation of Seldon.
*/

/*!
\page installation Installation

<h2>The compiler</h2>

<p> %Seldon is supposed to be fully compliant with the <b>C++
standard</b>. Therefore, it can be compiled by GNU GCC (>=3.0; all released x.y versions were tested
from version 3.2 to version 6.1) and by the
Intel C++ compiler icc (tested with icc 7.1, 8.0 and 12.0). No tests were conducted with proprietary compilers under Unix, but the compliance with the C++ standard should ensure portability. </p>

<h2>Installation</h2>

<p>Download the source code (<a href="http://www.math.u-bordeaux.fr/~durufle/codes.php"> Marc Durufl&eacute;'s homepage</a>), usually available in a compressed file, e.g. Seldon-[date].tar.bz2. Uncompress the file, i.e. under Unix: <code>tar jxvf Seldon-[date].tar.bz2</code>. This will create a directory <code>seldon</code> in which you will find %Seldon.</p>

<h2>Installation of CBlas</h2>

<p>If you want to use the interface with Blas, you also need to have Blas (of course) and CBlas (C interface to the Blas) installed. %Seldon uses CBlas to ensure portability of the interface.</p>

<p>Blas is usually installed. If not, you may refer to the dedicated documentation. As for CBlas, download it at <a href="http://www.netlib.org/blas/">http://www.netlib.org/blas/</a>, expand it (e.g. <code>tar -zxvf cblas.tgz</code>), and compile it (e.g. make). The installation is then complete.</p>

<h2>Tests</h2>

<p>First compile and run <code>test.cpp</code> which is an example provided with %Seldon (in the directory test/program). For example:</p>

\prescreen g++ -I../.. simple_test.cpp && ./a.out\endprescreen

<p>This should return:</p>

\prescreen
Seldon: compilation test
Vector: 0       1       2
Vector: 0       1       2       19
\endprescreen

<p>In <code>test.cpp</code>, the first line includes %Seldon through <code>SeldonLib.hxx</code>. <code>SeldonLib.hxx</code> is the only file to be included and it is located in the directory <code>seldon</code> expanded from the downloaded file (see section Installation). If you compile your own code on top of %Seldon, just provide the path to <code>seldon</code> to the compiler, e.g.:</p>

\prescreen g++ -I/path/to/seldon your_code.cpp && ./a.out\endprescreen

<p>A second test is provided: <code>test_Blas.cpp</code>. If Blas and CBlas are properly installed and the library file of CBlas is located in <code>[CBlas-library]</code> (e.g. [CBlas-directory]/lib/LINUX/cblas_LINUX.a), the compilation line should be:</p>

\prescreen g++ -I../.. test_Blas.cpp [CBlas-library] -lblas -lgfortran && ./a.out\endprescreen

<p>This should return:</p>

\prescreen
Seldon: compilation test with Blas
...
\endprescreen

<p>With a lot of lines testing different functions of Blas. If Cblas is already installed in your system or if you installed it by using apt-get on linux or fink on mac, you may type the following compilation line:</p>

\prescreen g++ -I../.. test_Blas.cpp -lcblas -lblas -lgfortran && ./a.out\endprescreen

<p>For older versions of gcc, -lg2c or -lgfortran may be needed. If you are using old intel
compiler icc, -lifcore may be needed. </p>

<h2> Header files </h2>

<p> The file <code>SeldonLib.hxx</code> includes a complete version of Seldon with the following files:</p>

<ul>
<li><code>SeldonFlag.hxx</code> : common flags to use with a detailed description for each of them </li>
<li><code>SeldonSolver.hxx</code> : Seldon with direct and iterative solvers and also eigenvalue solvers. </li>
<li><code>SeldonComplexMatrix.hxx</code> : Complex sparse matrices with a separated real and imaginary part. </li>
<li><code>SeldonDistributed.hxx</code> : Support for distributed vectors, matrices and distributed solvers (through MPI paradigm). </li>
<li><code>Vector2.hxx</code> and <code>Vector3.hxx</code> : Basic class for vector of vectors (and vector of vectors of vectors). </li>
<li><code>IOMatrixMarket.hxx</code> : Routines for writing/reading sparse matrix in Matrix-Market format or Harwell-Boeing </li>
<li><code>BandMatrix.hxx</code> : Class for banded matrices </li>
</ul>

<p>Therefore, it is recommended to include this file. If you want a lighter version of Seldon, you can include only <code>Seldon.hxx</code> for example, you will not have the interface with iterative or direct solvers, the support of distributed matrices, etc. The other advantage in including <code>SeldonLib.hxx</code> is that the same file is included if you want to use or not a compiled version of Seldon, which is the topic of the next section. </li>

<h2>Compiled library</h2>

<p>A Makefile is proposed for Linux (the file <code>Makefile.LINUX</code>), you can copy this file:</p>

\prescreen cp Makefile.LINUX Makefile \endprescreen

<p>In this Makefile, you specify the source file to compile in the line beginning with LSTBIN. The name of the executable is located in the line beginning with BIN. Here, the executable is written in the file test/test.x and after compilation the file is automatically moved (through command mv) to the main directory of Seldon. This trick is used to force the compilation even if the source file has not been modified (but another source file of Seldon). In the first part of the Makefile, you inform which external libraries you want to use (e.g. Blas/Lapack, Mumps, Pardiso, Pastix, Arpack, Feast, Anasazi, Cholmod). In the variables CHE_ARPACK, CHEMUMPS_SEQ, CHE_SCOTCH, you specify the folder where each library has been installed. The variable EXTERNAL is usually a folder that contains all external libraries. In the section beginning with
\precode
ifeq($(USE_BLAS),YES)
\endprecode
you have to specify how you want to link Blas, the most efficient option is usually to link with MKL library. </p>

<p> In the Makefile, you have at the beginning the line:</p>

\precode
OPTIMIZATION := YES
\endprecode

<p>It means that your code will be compiled in optimization mode (with SELDON_DEBUG_LEVEL_1, such that a few checks are performed) with the option -O3. If you have a segmentation fault, or if you want to check that your function is safe, you can set:</p>

\precode
OPTIMIZATION := NO
\endprecode

<p>In this case, the code will be compiled in debug mode (with SELDON_DEBUG_LEVEL 4 that induces a lot of checks) with the option -g. As a result, the execution will be particularly slow. For these two modes of compilation (YES or NO), all the files of Seldon are included (.cxx files as well), such that the compilation time can be very large because it will recompile all the functions you need. If you change only a line of your source file, all the functions needed will be recompiled each time you type make. If you want to produce a compiled library of Seldon such that only functions that are modified are recompiled, you can select the following mode:  </p>

\precode
OPTIMIZATION := FAST
\endprecode

<p> A library with Seldon functions will be generated in the folder lib (such as libseldon_Sopt.a) in optimized mode. If STATIC_COMPILATION has been set to YES, a static library is generated. If you set STATIC_COMPILATION to NO in the makefile, a dynamic library is generated (libseldon_Sopt.so). In that case, you will need to update the variable LD_LIBRARY_PATH such that he finds where the library is. If <b>FAST</b> has been selected, only header files are included (.cxx are not included), each .cxx file is compiled (by instantiation of templates) to produce object files (in the folder lib/Compil/Seldon). You can accelerate the compilation by typing:</p>

\prescreen make -j8 \endprescreen

<p>In that case, if your machine has 8 cores, it will compile eight .cpp files at the same time efficiently. This mode of compilation is tricky because it can generate undefined references if you instantiate a class or a function for a set of template parameters not planned. In case of undefined references, you can add the new instantiation in one of cpp files contained in the folder lib/Compil/Seldon. A last mode of compilation is:</p>

\precode
OPTIMIZATION := TEST
\endprecode

<p>In that case, the compilation of all cpp files and the main source file is performed in debug mode (with flag SELDON_DEBUG_LEVEL_4 and option -g), leading to a slow execution.</p>

*/
